//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8799
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SDRR_program.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Reports")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Reports : global::System.Data.DataSet {
        
        private TransactionDataTable tableTransaction;
        
        private ReturnDataTable tableReturn;
        
        private UpdateSdrrDataTable tableUpdateSdrr;
        
        private TradeReturnDataTable tableTradeReturn;
        
        private crtCutIndexDataTable tablecrtCutIndex;
        
        private SalesInvoiceRegisterDataTable tableSalesInvoiceRegister;
        
        private RMRregisterDataTable tableRMRregister;
        
        private ListOfAllSDRRDataTable tableListOfAllSDRR;
        
        private zone_sbsDataTable tablezone_sbs;
        
        private NUDDataTable tableNUD;
        
        private NUDRegisterDataTable tableNUDRegister;
        
        private delstatusreportDataTable tabledelstatusreport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Reports() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Reports(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Transaction"] != null)) {
                    base.Tables.Add(new TransactionDataTable(ds.Tables["Transaction"]));
                }
                if ((ds.Tables["Return"] != null)) {
                    base.Tables.Add(new ReturnDataTable(ds.Tables["Return"]));
                }
                if ((ds.Tables["UpdateSdrr"] != null)) {
                    base.Tables.Add(new UpdateSdrrDataTable(ds.Tables["UpdateSdrr"]));
                }
                if ((ds.Tables["TradeReturn"] != null)) {
                    base.Tables.Add(new TradeReturnDataTable(ds.Tables["TradeReturn"]));
                }
                if ((ds.Tables["crtCutIndex"] != null)) {
                    base.Tables.Add(new crtCutIndexDataTable(ds.Tables["crtCutIndex"]));
                }
                if ((ds.Tables["SalesInvoiceRegister"] != null)) {
                    base.Tables.Add(new SalesInvoiceRegisterDataTable(ds.Tables["SalesInvoiceRegister"]));
                }
                if ((ds.Tables["RMRregister"] != null)) {
                    base.Tables.Add(new RMRregisterDataTable(ds.Tables["RMRregister"]));
                }
                if ((ds.Tables["ListOfAllSDRR"] != null)) {
                    base.Tables.Add(new ListOfAllSDRRDataTable(ds.Tables["ListOfAllSDRR"]));
                }
                if ((ds.Tables["zone_sbs"] != null)) {
                    base.Tables.Add(new zone_sbsDataTable(ds.Tables["zone_sbs"]));
                }
                if ((ds.Tables["NUD"] != null)) {
                    base.Tables.Add(new NUDDataTable(ds.Tables["NUD"]));
                }
                if ((ds.Tables["NUDRegister"] != null)) {
                    base.Tables.Add(new NUDRegisterDataTable(ds.Tables["NUDRegister"]));
                }
                if ((ds.Tables["delstatusreport"] != null)) {
                    base.Tables.Add(new delstatusreportDataTable(ds.Tables["delstatusreport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransactionDataTable Transaction {
            get {
                return this.tableTransaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReturnDataTable Return {
            get {
                return this.tableReturn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UpdateSdrrDataTable UpdateSdrr {
            get {
                return this.tableUpdateSdrr;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TradeReturnDataTable TradeReturn {
            get {
                return this.tableTradeReturn;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public crtCutIndexDataTable crtCutIndex {
            get {
                return this.tablecrtCutIndex;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesInvoiceRegisterDataTable SalesInvoiceRegister {
            get {
                return this.tableSalesInvoiceRegister;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RMRregisterDataTable RMRregister {
            get {
                return this.tableRMRregister;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListOfAllSDRRDataTable ListOfAllSDRR {
            get {
                return this.tableListOfAllSDRR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public zone_sbsDataTable zone_sbs {
            get {
                return this.tablezone_sbs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NUDDataTable NUD {
            get {
                return this.tableNUD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NUDRegisterDataTable NUDRegister {
            get {
                return this.tableNUDRegister;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public delstatusreportDataTable delstatusreport {
            get {
                return this.tabledelstatusreport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Reports cln = ((Reports)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Transaction"] != null)) {
                    base.Tables.Add(new TransactionDataTable(ds.Tables["Transaction"]));
                }
                if ((ds.Tables["Return"] != null)) {
                    base.Tables.Add(new ReturnDataTable(ds.Tables["Return"]));
                }
                if ((ds.Tables["UpdateSdrr"] != null)) {
                    base.Tables.Add(new UpdateSdrrDataTable(ds.Tables["UpdateSdrr"]));
                }
                if ((ds.Tables["TradeReturn"] != null)) {
                    base.Tables.Add(new TradeReturnDataTable(ds.Tables["TradeReturn"]));
                }
                if ((ds.Tables["crtCutIndex"] != null)) {
                    base.Tables.Add(new crtCutIndexDataTable(ds.Tables["crtCutIndex"]));
                }
                if ((ds.Tables["SalesInvoiceRegister"] != null)) {
                    base.Tables.Add(new SalesInvoiceRegisterDataTable(ds.Tables["SalesInvoiceRegister"]));
                }
                if ((ds.Tables["RMRregister"] != null)) {
                    base.Tables.Add(new RMRregisterDataTable(ds.Tables["RMRregister"]));
                }
                if ((ds.Tables["ListOfAllSDRR"] != null)) {
                    base.Tables.Add(new ListOfAllSDRRDataTable(ds.Tables["ListOfAllSDRR"]));
                }
                if ((ds.Tables["zone_sbs"] != null)) {
                    base.Tables.Add(new zone_sbsDataTable(ds.Tables["zone_sbs"]));
                }
                if ((ds.Tables["NUD"] != null)) {
                    base.Tables.Add(new NUDDataTable(ds.Tables["NUD"]));
                }
                if ((ds.Tables["NUDRegister"] != null)) {
                    base.Tables.Add(new NUDRegisterDataTable(ds.Tables["NUDRegister"]));
                }
                if ((ds.Tables["delstatusreport"] != null)) {
                    base.Tables.Add(new delstatusreportDataTable(ds.Tables["delstatusreport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTransaction = ((TransactionDataTable)(base.Tables["Transaction"]));
            if ((initTable == true)) {
                if ((this.tableTransaction != null)) {
                    this.tableTransaction.InitVars();
                }
            }
            this.tableReturn = ((ReturnDataTable)(base.Tables["Return"]));
            if ((initTable == true)) {
                if ((this.tableReturn != null)) {
                    this.tableReturn.InitVars();
                }
            }
            this.tableUpdateSdrr = ((UpdateSdrrDataTable)(base.Tables["UpdateSdrr"]));
            if ((initTable == true)) {
                if ((this.tableUpdateSdrr != null)) {
                    this.tableUpdateSdrr.InitVars();
                }
            }
            this.tableTradeReturn = ((TradeReturnDataTable)(base.Tables["TradeReturn"]));
            if ((initTable == true)) {
                if ((this.tableTradeReturn != null)) {
                    this.tableTradeReturn.InitVars();
                }
            }
            this.tablecrtCutIndex = ((crtCutIndexDataTable)(base.Tables["crtCutIndex"]));
            if ((initTable == true)) {
                if ((this.tablecrtCutIndex != null)) {
                    this.tablecrtCutIndex.InitVars();
                }
            }
            this.tableSalesInvoiceRegister = ((SalesInvoiceRegisterDataTable)(base.Tables["SalesInvoiceRegister"]));
            if ((initTable == true)) {
                if ((this.tableSalesInvoiceRegister != null)) {
                    this.tableSalesInvoiceRegister.InitVars();
                }
            }
            this.tableRMRregister = ((RMRregisterDataTable)(base.Tables["RMRregister"]));
            if ((initTable == true)) {
                if ((this.tableRMRregister != null)) {
                    this.tableRMRregister.InitVars();
                }
            }
            this.tableListOfAllSDRR = ((ListOfAllSDRRDataTable)(base.Tables["ListOfAllSDRR"]));
            if ((initTable == true)) {
                if ((this.tableListOfAllSDRR != null)) {
                    this.tableListOfAllSDRR.InitVars();
                }
            }
            this.tablezone_sbs = ((zone_sbsDataTable)(base.Tables["zone_sbs"]));
            if ((initTable == true)) {
                if ((this.tablezone_sbs != null)) {
                    this.tablezone_sbs.InitVars();
                }
            }
            this.tableNUD = ((NUDDataTable)(base.Tables["NUD"]));
            if ((initTable == true)) {
                if ((this.tableNUD != null)) {
                    this.tableNUD.InitVars();
                }
            }
            this.tableNUDRegister = ((NUDRegisterDataTable)(base.Tables["NUDRegister"]));
            if ((initTable == true)) {
                if ((this.tableNUDRegister != null)) {
                    this.tableNUDRegister.InitVars();
                }
            }
            this.tabledelstatusreport = ((delstatusreportDataTable)(base.Tables["delstatusreport"]));
            if ((initTable == true)) {
                if ((this.tabledelstatusreport != null)) {
                    this.tabledelstatusreport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Reports";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Reports.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTransaction = new TransactionDataTable();
            base.Tables.Add(this.tableTransaction);
            this.tableReturn = new ReturnDataTable();
            base.Tables.Add(this.tableReturn);
            this.tableUpdateSdrr = new UpdateSdrrDataTable();
            base.Tables.Add(this.tableUpdateSdrr);
            this.tableTradeReturn = new TradeReturnDataTable();
            base.Tables.Add(this.tableTradeReturn);
            this.tablecrtCutIndex = new crtCutIndexDataTable();
            base.Tables.Add(this.tablecrtCutIndex);
            this.tableSalesInvoiceRegister = new SalesInvoiceRegisterDataTable();
            base.Tables.Add(this.tableSalesInvoiceRegister);
            this.tableRMRregister = new RMRregisterDataTable();
            base.Tables.Add(this.tableRMRregister);
            this.tableListOfAllSDRR = new ListOfAllSDRRDataTable();
            base.Tables.Add(this.tableListOfAllSDRR);
            this.tablezone_sbs = new zone_sbsDataTable();
            base.Tables.Add(this.tablezone_sbs);
            this.tableNUD = new NUDDataTable();
            base.Tables.Add(this.tableNUD);
            this.tableNUDRegister = new NUDRegisterDataTable();
            base.Tables.Add(this.tableNUDRegister);
            this.tabledelstatusreport = new delstatusreportDataTable();
            base.Tables.Add(this.tabledelstatusreport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTransaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReturn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUpdateSdrr() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTradeReturn() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecrtCutIndex() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalesInvoiceRegister() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRMRregister() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeListOfAllSDRR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializezone_sbs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNUD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNUDRegister() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedelstatusreport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Reports ds = new Reports();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TransactionRowChangeEventHandler(object sender, TransactionRowChangeEvent e);
        
        public delegate void ReturnRowChangeEventHandler(object sender, ReturnRowChangeEvent e);
        
        public delegate void UpdateSdrrRowChangeEventHandler(object sender, UpdateSdrrRowChangeEvent e);
        
        public delegate void TradeReturnRowChangeEventHandler(object sender, TradeReturnRowChangeEvent e);
        
        public delegate void crtCutIndexRowChangeEventHandler(object sender, crtCutIndexRowChangeEvent e);
        
        public delegate void SalesInvoiceRegisterRowChangeEventHandler(object sender, SalesInvoiceRegisterRowChangeEvent e);
        
        public delegate void RMRregisterRowChangeEventHandler(object sender, RMRregisterRowChangeEvent e);
        
        public delegate void ListOfAllSDRRRowChangeEventHandler(object sender, ListOfAllSDRRRowChangeEvent e);
        
        public delegate void zone_sbsRowChangeEventHandler(object sender, zone_sbsRowChangeEvent e);
        
        public delegate void NUDRowChangeEventHandler(object sender, NUDRowChangeEvent e);
        
        public delegate void NUDRegisterRowChangeEventHandler(object sender, NUDRegisterRowChangeEvent e);
        
        public delegate void delstatusreportRowChangeEventHandler(object sender, delstatusreportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TransactionDataTable : global::System.Data.TypedTableBase<TransactionRow> {
            
            private global::System.Data.DataColumn column_sdrrno;
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columninvoice_date;
            
            private global::System.Data.DataColumn columnnoOfBox;
            
            private global::System.Data.DataColumn columncustName;
            
            private global::System.Data.DataColumn columnpdcamt;
            
            private global::System.Data.DataColumn columncodamt;
            
            private global::System.Data.DataColumn columnpdcamt1;
            
            private global::System.Data.DataColumn columndriver;
            
            private global::System.Data.DataColumn columnhelper;
            
            private global::System.Data.DataColumn columnroute;
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntelno;
            
            private global::System.Data.DataColumn columntotalpdc;
            
            private global::System.Data.DataColumn columntotalcod;
            
            private global::System.Data.DataColumn columnprepby;
            
            private global::System.Data.DataColumn columntvalueship;
            
            private global::System.Data.DataColumn columnhelper1;
            
            private global::System.Data.DataColumn columnnc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionDataTable() {
                this.TableName = "Transaction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TransactionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _sdrrnoColumn {
                get {
                    return this.column_sdrrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_dateColumn {
                get {
                    return this.columninvoice_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn noOfBoxColumn {
                get {
                    return this.columnnoOfBox;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn custNameColumn {
                get {
                    return this.columncustName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pdcamtColumn {
                get {
                    return this.columnpdcamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codamtColumn {
                get {
                    return this.columncodamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pdcamt1Column {
                get {
                    return this.columnpdcamt1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverColumn {
                get {
                    return this.columndriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn helperColumn {
                get {
                    return this.columnhelper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn routeColumn {
                get {
                    return this.columnroute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn telnoColumn {
                get {
                    return this.columntelno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalpdcColumn {
                get {
                    return this.columntotalpdc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalcodColumn {
                get {
                    return this.columntotalcod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prepbyColumn {
                get {
                    return this.columnprepby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tvalueshipColumn {
                get {
                    return this.columntvalueship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn helper1Column {
                get {
                    return this.columnhelper1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ncColumn {
                get {
                    return this.columnnc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionRow this[int index] {
                get {
                    return ((TransactionRow)(this.Rows[index]));
                }
            }
            
            public event TransactionRowChangeEventHandler TransactionRowChanging;
            
            public event TransactionRowChangeEventHandler TransactionRowChanged;
            
            public event TransactionRowChangeEventHandler TransactionRowDeleting;
            
            public event TransactionRowChangeEventHandler TransactionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTransactionRow(TransactionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionRow AddTransactionRow(
                        int _sdrrno, 
                        int invoice_no, 
                        string invoice_date, 
                        decimal noOfBox, 
                        string custName, 
                        decimal pdcamt, 
                        decimal codamt, 
                        decimal pdcamt1, 
                        string driver, 
                        string helper, 
                        string route, 
                        string client, 
                        System.DateTime date, 
                        string telno, 
                        decimal totalpdc, 
                        decimal totalcod, 
                        string prepby, 
                        decimal tvalueship, 
                        string helper1, 
                        string nc) {
                TransactionRow rowTransactionRow = ((TransactionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _sdrrno,
                        invoice_no,
                        invoice_date,
                        noOfBox,
                        custName,
                        pdcamt,
                        codamt,
                        pdcamt1,
                        driver,
                        helper,
                        route,
                        client,
                        date,
                        telno,
                        totalpdc,
                        totalcod,
                        prepby,
                        tvalueship,
                        helper1,
                        nc};
                rowTransactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTransactionRow);
                return rowTransactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TransactionDataTable cln = ((TransactionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TransactionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_sdrrno = base.Columns["_sdrrno"];
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columninvoice_date = base.Columns["invoice_date"];
                this.columnnoOfBox = base.Columns["noOfBox"];
                this.columncustName = base.Columns["custName"];
                this.columnpdcamt = base.Columns["pdcamt"];
                this.columncodamt = base.Columns["codamt"];
                this.columnpdcamt1 = base.Columns["pdcamt1"];
                this.columndriver = base.Columns["driver"];
                this.columnhelper = base.Columns["helper"];
                this.columnroute = base.Columns["route"];
                this.columnclient = base.Columns["client"];
                this.columndate = base.Columns["date"];
                this.columntelno = base.Columns["telno"];
                this.columntotalpdc = base.Columns["totalpdc"];
                this.columntotalcod = base.Columns["totalcod"];
                this.columnprepby = base.Columns["prepby"];
                this.columntvalueship = base.Columns["tvalueship"];
                this.columnhelper1 = base.Columns["helper1"];
                this.columnnc = base.Columns["nc"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_sdrrno = new global::System.Data.DataColumn("_sdrrno", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.column_sdrrno);
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columninvoice_date = new global::System.Data.DataColumn("invoice_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_date);
                this.columnnoOfBox = new global::System.Data.DataColumn("noOfBox", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnoOfBox);
                this.columncustName = new global::System.Data.DataColumn("custName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustName);
                this.columnpdcamt = new global::System.Data.DataColumn("pdcamt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpdcamt);
                this.columncodamt = new global::System.Data.DataColumn("codamt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncodamt);
                this.columnpdcamt1 = new global::System.Data.DataColumn("pdcamt1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpdcamt1);
                this.columndriver = new global::System.Data.DataColumn("driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriver);
                this.columnhelper = new global::System.Data.DataColumn("helper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelper);
                this.columnroute = new global::System.Data.DataColumn("route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnroute);
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columndate = new global::System.Data.DataColumn("date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntelno = new global::System.Data.DataColumn("telno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntelno);
                this.columntotalpdc = new global::System.Data.DataColumn("totalpdc", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalpdc);
                this.columntotalcod = new global::System.Data.DataColumn("totalcod", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalcod);
                this.columnprepby = new global::System.Data.DataColumn("prepby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprepby);
                this.columntvalueship = new global::System.Data.DataColumn("tvalueship", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntvalueship);
                this.columnhelper1 = new global::System.Data.DataColumn("helper1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelper1);
                this.columnnc = new global::System.Data.DataColumn("nc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnc);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionRow NewTransactionRow() {
                return ((TransactionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TransactionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TransactionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransactionRowChanged != null)) {
                    this.TransactionRowChanged(this, new TransactionRowChangeEvent(((TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransactionRowChanging != null)) {
                    this.TransactionRowChanging(this, new TransactionRowChangeEvent(((TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransactionRowDeleted != null)) {
                    this.TransactionRowDeleted(this, new TransactionRowChangeEvent(((TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransactionRowDeleting != null)) {
                    this.TransactionRowDeleting(this, new TransactionRowChangeEvent(((TransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTransactionRow(TransactionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TransactionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReturnDataTable : global::System.Data.TypedTableBase<ReturnRow> {
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columncutItemno;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnroute;
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columntamount;
            
            private global::System.Data.DataColumn columnprodcode;
            
            private global::System.Data.DataColumn columnprodname;
            
            private global::System.Data.DataColumn columnunitp;
            
            private global::System.Data.DataColumn columnuom;
            
            private global::System.Data.DataColumn columndstock;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columngstock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnDataTable() {
                this.TableName = "Return";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReturnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReturnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cutItemnoColumn {
                get {
                    return this.columncutItemno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn routeColumn {
                get {
                    return this.columnroute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tamountColumn {
                get {
                    return this.columntamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prodcodeColumn {
                get {
                    return this.columnprodcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prodnameColumn {
                get {
                    return this.columnprodname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitpColumn {
                get {
                    return this.columnunitp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uomColumn {
                get {
                    return this.columnuom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dstockColumn {
                get {
                    return this.columndstock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gstockColumn {
                get {
                    return this.columngstock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRow this[int index] {
                get {
                    return ((ReturnRow)(this.Rows[index]));
                }
            }
            
            public event ReturnRowChangeEventHandler ReturnRowChanging;
            
            public event ReturnRowChangeEventHandler ReturnRowChanged;
            
            public event ReturnRowChangeEventHandler ReturnRowDeleting;
            
            public event ReturnRowChangeEventHandler ReturnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReturnRow(ReturnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRow AddReturnRow(int invoice_no, int cutItemno, string name, string route, string client, decimal tamount, string prodcode, string prodname, decimal unitp, string uom, decimal dstock, decimal amount, decimal gstock) {
                ReturnRow rowReturnRow = ((ReturnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        invoice_no,
                        cutItemno,
                        name,
                        route,
                        client,
                        tamount,
                        prodcode,
                        prodname,
                        unitp,
                        uom,
                        dstock,
                        amount,
                        gstock};
                rowReturnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReturnRow);
                return rowReturnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRow FindByinvoice_no(int invoice_no) {
                return ((ReturnRow)(this.Rows.Find(new object[] {
                            invoice_no})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReturnDataTable cln = ((ReturnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReturnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columncutItemno = base.Columns["cutItemno"];
                this.columnname = base.Columns["name"];
                this.columnroute = base.Columns["route"];
                this.columnclient = base.Columns["client"];
                this.columntamount = base.Columns["tamount"];
                this.columnprodcode = base.Columns["prodcode"];
                this.columnprodname = base.Columns["prodname"];
                this.columnunitp = base.Columns["unitp"];
                this.columnuom = base.Columns["uom"];
                this.columndstock = base.Columns["dstock"];
                this.columnamount = base.Columns["amount"];
                this.columngstock = base.Columns["gstock"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columncutItemno = new global::System.Data.DataColumn("cutItemno", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncutItemno);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnroute = new global::System.Data.DataColumn("route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnroute);
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columntamount = new global::System.Data.DataColumn("tamount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntamount);
                this.columnprodcode = new global::System.Data.DataColumn("prodcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprodcode);
                this.columnprodname = new global::System.Data.DataColumn("prodname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprodname);
                this.columnunitp = new global::System.Data.DataColumn("unitp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunitp);
                this.columnuom = new global::System.Data.DataColumn("uom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuom);
                this.columndstock = new global::System.Data.DataColumn("dstock", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndstock);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columngstock = new global::System.Data.DataColumn("gstock", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngstock);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninvoice_no}, true));
                this.columninvoice_no.AllowDBNull = false;
                this.columninvoice_no.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRow NewReturnRow() {
                return ((ReturnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReturnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReturnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReturnRowChanged != null)) {
                    this.ReturnRowChanged(this, new ReturnRowChangeEvent(((ReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReturnRowChanging != null)) {
                    this.ReturnRowChanging(this, new ReturnRowChangeEvent(((ReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReturnRowDeleted != null)) {
                    this.ReturnRowDeleted(this, new ReturnRowChangeEvent(((ReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReturnRowDeleting != null)) {
                    this.ReturnRowDeleting(this, new ReturnRowChangeEvent(((ReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReturnRow(ReturnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReturnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UpdateSdrrDataTable : global::System.Data.TypedTableBase<UpdateSdrrRow> {
            
            private global::System.Data.DataColumn columnsdrrNo;
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columndatedel;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnremarks;
            
            private global::System.Data.DataColumn columndriver;
            
            private global::System.Data.DataColumn columnhelper;
            
            private global::System.Data.DataColumn columnhelper2;
            
            private global::System.Data.DataColumn columntruksno;
            
            private global::System.Data.DataColumn columnleftwrhse;
            
            private global::System.Data.DataColumn columnarrvdwrhse;
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columninvoice_value;
            
            private global::System.Data.DataColumn columncustomer_name;
            
            private global::System.Data.DataColumn columncases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrDataTable() {
                this.TableName = "UpdateSdrr";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UpdateSdrrDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UpdateSdrrDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sdrrNoColumn {
                get {
                    return this.columnsdrrNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datedelColumn {
                get {
                    return this.columndatedel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remarksColumn {
                get {
                    return this.columnremarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn driverColumn {
                get {
                    return this.columndriver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn helperColumn {
                get {
                    return this.columnhelper;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn helper2Column {
                get {
                    return this.columnhelper2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn truksnoColumn {
                get {
                    return this.columntruksno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn leftwrhseColumn {
                get {
                    return this.columnleftwrhse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn arrvdwrhseColumn {
                get {
                    return this.columnarrvdwrhse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_valueColumn {
                get {
                    return this.columninvoice_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn customer_nameColumn {
                get {
                    return this.columncustomer_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn casesColumn {
                get {
                    return this.columncases;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrRow this[int index] {
                get {
                    return ((UpdateSdrrRow)(this.Rows[index]));
                }
            }
            
            public event UpdateSdrrRowChangeEventHandler UpdateSdrrRowChanging;
            
            public event UpdateSdrrRowChangeEventHandler UpdateSdrrRowChanged;
            
            public event UpdateSdrrRowChangeEventHandler UpdateSdrrRowDeleting;
            
            public event UpdateSdrrRowChangeEventHandler UpdateSdrrRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUpdateSdrrRow(UpdateSdrrRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrRow AddUpdateSdrrRow(int sdrrNo, int invoice_no, System.DateTime datedel, string status, string remarks, string driver, string helper, string helper2, int truksno, System.DateTime leftwrhse, System.DateTime arrvdwrhse, string client, decimal invoice_value, string customer_name, string cases) {
                UpdateSdrrRow rowUpdateSdrrRow = ((UpdateSdrrRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sdrrNo,
                        invoice_no,
                        datedel,
                        status,
                        remarks,
                        driver,
                        helper,
                        helper2,
                        truksno,
                        leftwrhse,
                        arrvdwrhse,
                        client,
                        invoice_value,
                        customer_name,
                        cases};
                rowUpdateSdrrRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUpdateSdrrRow);
                return rowUpdateSdrrRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UpdateSdrrDataTable cln = ((UpdateSdrrDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UpdateSdrrDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsdrrNo = base.Columns["sdrrNo"];
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columndatedel = base.Columns["datedel"];
                this.columnstatus = base.Columns["status"];
                this.columnremarks = base.Columns["remarks"];
                this.columndriver = base.Columns["driver"];
                this.columnhelper = base.Columns["helper"];
                this.columnhelper2 = base.Columns["helper2"];
                this.columntruksno = base.Columns["truksno"];
                this.columnleftwrhse = base.Columns["leftwrhse"];
                this.columnarrvdwrhse = base.Columns["arrvdwrhse"];
                this.columnclient = base.Columns["client"];
                this.columninvoice_value = base.Columns["invoice_value"];
                this.columncustomer_name = base.Columns["customer_name"];
                this.columncases = base.Columns["cases"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsdrrNo = new global::System.Data.DataColumn("sdrrNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsdrrNo);
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columndatedel = new global::System.Data.DataColumn("datedel", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatedel);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnremarks = new global::System.Data.DataColumn("remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremarks);
                this.columndriver = new global::System.Data.DataColumn("driver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndriver);
                this.columnhelper = new global::System.Data.DataColumn("helper", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelper);
                this.columnhelper2 = new global::System.Data.DataColumn("helper2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhelper2);
                this.columntruksno = new global::System.Data.DataColumn("truksno", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntruksno);
                this.columnleftwrhse = new global::System.Data.DataColumn("leftwrhse", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleftwrhse);
                this.columnarrvdwrhse = new global::System.Data.DataColumn("arrvdwrhse", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarrvdwrhse);
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columninvoice_value = new global::System.Data.DataColumn("invoice_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_value);
                this.columncustomer_name = new global::System.Data.DataColumn("customer_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustomer_name);
                this.columncases = new global::System.Data.DataColumn("cases", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncases);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrRow NewUpdateSdrrRow() {
                return ((UpdateSdrrRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UpdateSdrrRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UpdateSdrrRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UpdateSdrrRowChanged != null)) {
                    this.UpdateSdrrRowChanged(this, new UpdateSdrrRowChangeEvent(((UpdateSdrrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UpdateSdrrRowChanging != null)) {
                    this.UpdateSdrrRowChanging(this, new UpdateSdrrRowChangeEvent(((UpdateSdrrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UpdateSdrrRowDeleted != null)) {
                    this.UpdateSdrrRowDeleted(this, new UpdateSdrrRowChangeEvent(((UpdateSdrrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UpdateSdrrRowDeleting != null)) {
                    this.UpdateSdrrRowDeleting(this, new UpdateSdrrRowChangeEvent(((UpdateSdrrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUpdateSdrrRow(UpdateSdrrRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UpdateSdrrDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TradeReturnDataTable : global::System.Data.TypedTableBase<TradeReturnRow> {
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columndocNo;
            
            private global::System.Data.DataColumn columncustName;
            
            private global::System.Data.DataColumn columnsi;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnapprby;
            
            private global::System.Data.DataColumn columntamount;
            
            private global::System.Data.DataColumn columnprodcode;
            
            private global::System.Data.DataColumn columnprodname;
            
            private global::System.Data.DataColumn columnqcases;
            
            private global::System.Data.DataColumn columnqpcs;
            
            private global::System.Data.DataColumn columnUcases;
            
            private global::System.Data.DataColumn columnUpcs;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnreason;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnDataTable() {
                this.TableName = "TradeReturn";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradeReturnDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TradeReturnDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn docNoColumn {
                get {
                    return this.columndocNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn custNameColumn {
                get {
                    return this.columncustName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn siColumn {
                get {
                    return this.columnsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apprbyColumn {
                get {
                    return this.columnapprby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tamountColumn {
                get {
                    return this.columntamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prodcodeColumn {
                get {
                    return this.columnprodcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prodnameColumn {
                get {
                    return this.columnprodname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qcasesColumn {
                get {
                    return this.columnqcases;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qpcsColumn {
                get {
                    return this.columnqpcs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UcasesColumn {
                get {
                    return this.columnUcases;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpcsColumn {
                get {
                    return this.columnUpcs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnRow this[int index] {
                get {
                    return ((TradeReturnRow)(this.Rows[index]));
                }
            }
            
            public event TradeReturnRowChangeEventHandler TradeReturnRowChanging;
            
            public event TradeReturnRowChangeEventHandler TradeReturnRowChanged;
            
            public event TradeReturnRowChangeEventHandler TradeReturnRowDeleting;
            
            public event TradeReturnRowChangeEventHandler TradeReturnRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTradeReturnRow(TradeReturnRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnRow AddTradeReturnRow(string client, int docNo, string custName, int si, System.DateTime date, string apprby, decimal tamount, string prodcode, string prodname, decimal qcases, decimal qpcs, decimal Ucases, decimal Upcs, decimal amount, string reason) {
                TradeReturnRow rowTradeReturnRow = ((TradeReturnRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        client,
                        docNo,
                        custName,
                        si,
                        date,
                        apprby,
                        tamount,
                        prodcode,
                        prodname,
                        qcases,
                        qpcs,
                        Ucases,
                        Upcs,
                        amount,
                        reason};
                rowTradeReturnRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTradeReturnRow);
                return rowTradeReturnRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TradeReturnDataTable cln = ((TradeReturnDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TradeReturnDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnclient = base.Columns["client"];
                this.columndocNo = base.Columns["docNo"];
                this.columncustName = base.Columns["custName"];
                this.columnsi = base.Columns["si"];
                this.columndate = base.Columns["date"];
                this.columnapprby = base.Columns["apprby"];
                this.columntamount = base.Columns["tamount"];
                this.columnprodcode = base.Columns["prodcode"];
                this.columnprodname = base.Columns["prodname"];
                this.columnqcases = base.Columns["qcases"];
                this.columnqpcs = base.Columns["qpcs"];
                this.columnUcases = base.Columns["Ucases"];
                this.columnUpcs = base.Columns["Upcs"];
                this.columnamount = base.Columns["amount"];
                this.columnreason = base.Columns["reason"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columndocNo = new global::System.Data.DataColumn("docNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocNo);
                this.columncustName = new global::System.Data.DataColumn("custName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustName);
                this.columnsi = new global::System.Data.DataColumn("si", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsi);
                this.columndate = new global::System.Data.DataColumn("date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnapprby = new global::System.Data.DataColumn("apprby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapprby);
                this.columntamount = new global::System.Data.DataColumn("tamount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntamount);
                this.columnprodcode = new global::System.Data.DataColumn("prodcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprodcode);
                this.columnprodname = new global::System.Data.DataColumn("prodname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprodname);
                this.columnqcases = new global::System.Data.DataColumn("qcases", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqcases);
                this.columnqpcs = new global::System.Data.DataColumn("qpcs", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqpcs);
                this.columnUcases = new global::System.Data.DataColumn("Ucases", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUcases);
                this.columnUpcs = new global::System.Data.DataColumn("Upcs", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpcs);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnreason = new global::System.Data.DataColumn("reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnRow NewTradeReturnRow() {
                return ((TradeReturnRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TradeReturnRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TradeReturnRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TradeReturnRowChanged != null)) {
                    this.TradeReturnRowChanged(this, new TradeReturnRowChangeEvent(((TradeReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TradeReturnRowChanging != null)) {
                    this.TradeReturnRowChanging(this, new TradeReturnRowChangeEvent(((TradeReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TradeReturnRowDeleted != null)) {
                    this.TradeReturnRowDeleted(this, new TradeReturnRowChangeEvent(((TradeReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TradeReturnRowDeleting != null)) {
                    this.TradeReturnRowDeleting(this, new TradeReturnRowChangeEvent(((TradeReturnRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTradeReturnRow(TradeReturnRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TradeReturnDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class crtCutIndexDataTable : global::System.Data.TypedTableBase<crtCutIndexRow> {
            
            private global::System.Data.DataColumn columnrowindex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexDataTable() {
                this.TableName = "crtCutIndex";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal crtCutIndexDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected crtCutIndexDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowindexColumn {
                get {
                    return this.columnrowindex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexRow this[int index] {
                get {
                    return ((crtCutIndexRow)(this.Rows[index]));
                }
            }
            
            public event crtCutIndexRowChangeEventHandler crtCutIndexRowChanging;
            
            public event crtCutIndexRowChangeEventHandler crtCutIndexRowChanged;
            
            public event crtCutIndexRowChangeEventHandler crtCutIndexRowDeleting;
            
            public event crtCutIndexRowChangeEventHandler crtCutIndexRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcrtCutIndexRow(crtCutIndexRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexRow AddcrtCutIndexRow(int rowindex) {
                crtCutIndexRow rowcrtCutIndexRow = ((crtCutIndexRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        rowindex};
                rowcrtCutIndexRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcrtCutIndexRow);
                return rowcrtCutIndexRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                crtCutIndexDataTable cln = ((crtCutIndexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new crtCutIndexDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrowindex = base.Columns["rowindex"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrowindex = new global::System.Data.DataColumn("rowindex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowindex);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexRow NewcrtCutIndexRow() {
                return ((crtCutIndexRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new crtCutIndexRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(crtCutIndexRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.crtCutIndexRowChanged != null)) {
                    this.crtCutIndexRowChanged(this, new crtCutIndexRowChangeEvent(((crtCutIndexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.crtCutIndexRowChanging != null)) {
                    this.crtCutIndexRowChanging(this, new crtCutIndexRowChangeEvent(((crtCutIndexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.crtCutIndexRowDeleted != null)) {
                    this.crtCutIndexRowDeleted(this, new crtCutIndexRowChangeEvent(((crtCutIndexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.crtCutIndexRowDeleting != null)) {
                    this.crtCutIndexRowDeleting(this, new crtCutIndexRowChangeEvent(((crtCutIndexRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecrtCutIndexRow(crtCutIndexRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "crtCutIndexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesInvoiceRegisterDataTable : global::System.Data.TypedTableBase<SalesInvoiceRegisterRow> {
            
            private global::System.Data.DataColumn columnTripNo;
            
            private global::System.Data.DataColumn columnPlateNo;
            
            private global::System.Data.DataColumn columnTruckType;
            
            private global::System.Data.DataColumn columnClient;
            
            private global::System.Data.DataColumn columnSDRRNo;
            
            private global::System.Data.DataColumn columnCustomer;
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnisCovered;
            
            private global::System.Data.DataColumn columnInvoiceNo;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnDateRec;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnRemarks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterDataTable() {
                this.TableName = "SalesInvoiceRegister";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesInvoiceRegisterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalesInvoiceRegisterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNoColumn {
                get {
                    return this.columnTripNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlateNoColumn {
                get {
                    return this.columnPlateNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TruckTypeColumn {
                get {
                    return this.columnTruckType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientColumn {
                get {
                    return this.columnClient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SDRRNoColumn {
                get {
                    return this.columnSDRRNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerColumn {
                get {
                    return this.columnCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isCoveredColumn {
                get {
                    return this.columnisCovered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNoColumn {
                get {
                    return this.columnInvoiceNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRecColumn {
                get {
                    return this.columnDateRec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarksColumn {
                get {
                    return this.columnRemarks;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterRow this[int index] {
                get {
                    return ((SalesInvoiceRegisterRow)(this.Rows[index]));
                }
            }
            
            public event SalesInvoiceRegisterRowChangeEventHandler SalesInvoiceRegisterRowChanging;
            
            public event SalesInvoiceRegisterRowChangeEventHandler SalesInvoiceRegisterRowChanged;
            
            public event SalesInvoiceRegisterRowChangeEventHandler SalesInvoiceRegisterRowDeleting;
            
            public event SalesInvoiceRegisterRowChangeEventHandler SalesInvoiceRegisterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalesInvoiceRegisterRow(SalesInvoiceRegisterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterRow AddSalesInvoiceRegisterRow(string TripNo, string PlateNo, string TruckType, string Client, string SDRRNo, string Customer, string Zone, string isCovered, string InvoiceNo, decimal Amount, string DateRec, string Status, string Remarks) {
                SalesInvoiceRegisterRow rowSalesInvoiceRegisterRow = ((SalesInvoiceRegisterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TripNo,
                        PlateNo,
                        TruckType,
                        Client,
                        SDRRNo,
                        Customer,
                        Zone,
                        isCovered,
                        InvoiceNo,
                        Amount,
                        DateRec,
                        Status,
                        Remarks};
                rowSalesInvoiceRegisterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesInvoiceRegisterRow);
                return rowSalesInvoiceRegisterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalesInvoiceRegisterDataTable cln = ((SalesInvoiceRegisterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesInvoiceRegisterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTripNo = base.Columns["TripNo"];
                this.columnPlateNo = base.Columns["PlateNo"];
                this.columnTruckType = base.Columns["TruckType"];
                this.columnClient = base.Columns["Client"];
                this.columnSDRRNo = base.Columns["SDRRNo"];
                this.columnCustomer = base.Columns["Customer"];
                this.columnZone = base.Columns["Zone"];
                this.columnisCovered = base.Columns["isCovered"];
                this.columnInvoiceNo = base.Columns["InvoiceNo"];
                this.columnAmount = base.Columns["Amount"];
                this.columnDateRec = base.Columns["DateRec"];
                this.columnStatus = base.Columns["Status"];
                this.columnRemarks = base.Columns["Remarks"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTripNo = new global::System.Data.DataColumn("TripNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNo);
                this.columnPlateNo = new global::System.Data.DataColumn("PlateNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlateNo);
                this.columnTruckType = new global::System.Data.DataColumn("TruckType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTruckType);
                this.columnClient = new global::System.Data.DataColumn("Client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnSDRRNo = new global::System.Data.DataColumn("SDRRNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDRRNo);
                this.columnCustomer = new global::System.Data.DataColumn("Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer);
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnisCovered = new global::System.Data.DataColumn("isCovered", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisCovered);
                this.columnInvoiceNo = new global::System.Data.DataColumn("InvoiceNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNo);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnDateRec = new global::System.Data.DataColumn("DateRec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRec);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnRemarks = new global::System.Data.DataColumn("Remarks", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemarks);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterRow NewSalesInvoiceRegisterRow() {
                return ((SalesInvoiceRegisterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesInvoiceRegisterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalesInvoiceRegisterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesInvoiceRegisterRowChanged != null)) {
                    this.SalesInvoiceRegisterRowChanged(this, new SalesInvoiceRegisterRowChangeEvent(((SalesInvoiceRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesInvoiceRegisterRowChanging != null)) {
                    this.SalesInvoiceRegisterRowChanging(this, new SalesInvoiceRegisterRowChangeEvent(((SalesInvoiceRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesInvoiceRegisterRowDeleted != null)) {
                    this.SalesInvoiceRegisterRowDeleted(this, new SalesInvoiceRegisterRowChangeEvent(((SalesInvoiceRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesInvoiceRegisterRowDeleting != null)) {
                    this.SalesInvoiceRegisterRowDeleting(this, new SalesInvoiceRegisterRowChangeEvent(((SalesInvoiceRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalesInvoiceRegisterRow(SalesInvoiceRegisterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesInvoiceRegisterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RMRregisterDataTable : global::System.Data.TypedTableBase<RMRregisterRow> {
            
            private global::System.Data.DataColumn columnmonth;
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columncustname;
            
            private global::System.Data.DataColumn columninvoice_value;
            
            private global::System.Data.DataColumn columnuom;
            
            private global::System.Data.DataColumn columnqty;
            
            private global::System.Data.DataColumn columncondition;
            
            private global::System.Data.DataColumn columnprepby;
            
            private global::System.Data.DataColumn columnchckby;
            
            private global::System.Data.DataColumn columnzone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterDataTable() {
                this.TableName = "RMRregister";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RMRregisterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RMRregisterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn monthColumn {
                get {
                    return this.columnmonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn custnameColumn {
                get {
                    return this.columncustname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_valueColumn {
                get {
                    return this.columninvoice_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uomColumn {
                get {
                    return this.columnuom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qtyColumn {
                get {
                    return this.columnqty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn conditionColumn {
                get {
                    return this.columncondition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn prepbyColumn {
                get {
                    return this.columnprepby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chckbyColumn {
                get {
                    return this.columnchckby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zoneColumn {
                get {
                    return this.columnzone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterRow this[int index] {
                get {
                    return ((RMRregisterRow)(this.Rows[index]));
                }
            }
            
            public event RMRregisterRowChangeEventHandler RMRregisterRowChanging;
            
            public event RMRregisterRowChangeEventHandler RMRregisterRowChanged;
            
            public event RMRregisterRowChangeEventHandler RMRregisterRowDeleting;
            
            public event RMRregisterRowChangeEventHandler RMRregisterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRMRregisterRow(RMRregisterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterRow AddRMRregisterRow(System.DateTime month, string client, int invoice_no, string custname, decimal invoice_value, string uom, decimal qty, string condition, string prepby, string chckby, string zone) {
                RMRregisterRow rowRMRregisterRow = ((RMRregisterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        month,
                        client,
                        invoice_no,
                        custname,
                        invoice_value,
                        uom,
                        qty,
                        condition,
                        prepby,
                        chckby,
                        zone};
                rowRMRregisterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRMRregisterRow);
                return rowRMRregisterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RMRregisterDataTable cln = ((RMRregisterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RMRregisterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmonth = base.Columns["month"];
                this.columnclient = base.Columns["client"];
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columncustname = base.Columns["custname"];
                this.columninvoice_value = base.Columns["invoice_value"];
                this.columnuom = base.Columns["uom"];
                this.columnqty = base.Columns["qty"];
                this.columncondition = base.Columns["condition"];
                this.columnprepby = base.Columns["prepby"];
                this.columnchckby = base.Columns["chckby"];
                this.columnzone = base.Columns["zone"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmonth = new global::System.Data.DataColumn("month", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmonth);
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columncustname = new global::System.Data.DataColumn("custname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustname);
                this.columninvoice_value = new global::System.Data.DataColumn("invoice_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_value);
                this.columnuom = new global::System.Data.DataColumn("uom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuom);
                this.columnqty = new global::System.Data.DataColumn("qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqty);
                this.columncondition = new global::System.Data.DataColumn("condition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncondition);
                this.columnprepby = new global::System.Data.DataColumn("prepby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprepby);
                this.columnchckby = new global::System.Data.DataColumn("chckby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchckby);
                this.columnzone = new global::System.Data.DataColumn("zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterRow NewRMRregisterRow() {
                return ((RMRregisterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RMRregisterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RMRregisterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RMRregisterRowChanged != null)) {
                    this.RMRregisterRowChanged(this, new RMRregisterRowChangeEvent(((RMRregisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RMRregisterRowChanging != null)) {
                    this.RMRregisterRowChanging(this, new RMRregisterRowChangeEvent(((RMRregisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RMRregisterRowDeleted != null)) {
                    this.RMRregisterRowDeleted(this, new RMRregisterRowChangeEvent(((RMRregisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RMRregisterRowDeleting != null)) {
                    this.RMRregisterRowDeleting(this, new RMRregisterRowChangeEvent(((RMRregisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRMRregisterRow(RMRregisterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RMRregisterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ListOfAllSDRRDataTable : global::System.Data.TypedTableBase<ListOfAllSDRRRow> {
            
            private global::System.Data.DataColumn columnTripNo;
            
            private global::System.Data.DataColumn columnSDRRDate;
            
            private global::System.Data.DataColumn columnSDRRNo;
            
            private global::System.Data.DataColumn columnClient;
            
            private global::System.Data.DataColumn columnRoute;
            
            private global::System.Data.DataColumn columnZone;
            
            private global::System.Data.DataColumn columnCartons;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRDataTable() {
                this.TableName = "ListOfAllSDRR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOfAllSDRRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ListOfAllSDRRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TripNoColumn {
                get {
                    return this.columnTripNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SDRRDateColumn {
                get {
                    return this.columnSDRRDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SDRRNoColumn {
                get {
                    return this.columnSDRRNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientColumn {
                get {
                    return this.columnClient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RouteColumn {
                get {
                    return this.columnRoute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneColumn {
                get {
                    return this.columnZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CartonsColumn {
                get {
                    return this.columnCartons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRRow this[int index] {
                get {
                    return ((ListOfAllSDRRRow)(this.Rows[index]));
                }
            }
            
            public event ListOfAllSDRRRowChangeEventHandler ListOfAllSDRRRowChanging;
            
            public event ListOfAllSDRRRowChangeEventHandler ListOfAllSDRRRowChanged;
            
            public event ListOfAllSDRRRowChangeEventHandler ListOfAllSDRRRowDeleting;
            
            public event ListOfAllSDRRRowChangeEventHandler ListOfAllSDRRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddListOfAllSDRRRow(ListOfAllSDRRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRRow AddListOfAllSDRRRow(string TripNo, System.DateTime SDRRDate, string SDRRNo, string Client, string Route, string Zone, decimal Cartons, decimal Amount) {
                ListOfAllSDRRRow rowListOfAllSDRRRow = ((ListOfAllSDRRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TripNo,
                        SDRRDate,
                        SDRRNo,
                        Client,
                        Route,
                        Zone,
                        Cartons,
                        Amount};
                rowListOfAllSDRRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowListOfAllSDRRRow);
                return rowListOfAllSDRRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ListOfAllSDRRDataTable cln = ((ListOfAllSDRRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ListOfAllSDRRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTripNo = base.Columns["TripNo"];
                this.columnSDRRDate = base.Columns["SDRRDate"];
                this.columnSDRRNo = base.Columns["SDRRNo"];
                this.columnClient = base.Columns["Client"];
                this.columnRoute = base.Columns["Route"];
                this.columnZone = base.Columns["Zone"];
                this.columnCartons = base.Columns["Cartons"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTripNo = new global::System.Data.DataColumn("TripNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTripNo);
                this.columnSDRRDate = new global::System.Data.DataColumn("SDRRDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDRRDate);
                this.columnSDRRNo = new global::System.Data.DataColumn("SDRRNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDRRNo);
                this.columnClient = new global::System.Data.DataColumn("Client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnRoute = new global::System.Data.DataColumn("Route", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoute);
                this.columnZone = new global::System.Data.DataColumn("Zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZone);
                this.columnCartons = new global::System.Data.DataColumn("Cartons", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCartons);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRRow NewListOfAllSDRRRow() {
                return ((ListOfAllSDRRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ListOfAllSDRRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ListOfAllSDRRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListOfAllSDRRRowChanged != null)) {
                    this.ListOfAllSDRRRowChanged(this, new ListOfAllSDRRRowChangeEvent(((ListOfAllSDRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListOfAllSDRRRowChanging != null)) {
                    this.ListOfAllSDRRRowChanging(this, new ListOfAllSDRRRowChangeEvent(((ListOfAllSDRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListOfAllSDRRRowDeleted != null)) {
                    this.ListOfAllSDRRRowDeleted(this, new ListOfAllSDRRRowChangeEvent(((ListOfAllSDRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListOfAllSDRRRowDeleting != null)) {
                    this.ListOfAllSDRRRowDeleting(this, new ListOfAllSDRRRowChangeEvent(((ListOfAllSDRRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveListOfAllSDRRRow(ListOfAllSDRRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ListOfAllSDRRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class zone_sbsDataTable : global::System.Data.TypedTableBase<zone_sbsRow> {
            
            private global::System.Data.DataColumn columnzone1;
            
            private global::System.Data.DataColumn columnzone2;
            
            private global::System.Data.DataColumn columnzone3;
            
            private global::System.Data.DataColumn columnzone4;
            
            private global::System.Data.DataColumn columnzone5;
            
            private global::System.Data.DataColumn columnzone6;
            
            private global::System.Data.DataColumn columnzone7;
            
            private global::System.Data.DataColumn columnzone8;
            
            private global::System.Data.DataColumn columntotalamt;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsDataTable() {
                this.TableName = "zone_sbs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zone_sbsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected zone_sbsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone1Column {
                get {
                    return this.columnzone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone2Column {
                get {
                    return this.columnzone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone3Column {
                get {
                    return this.columnzone3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone4Column {
                get {
                    return this.columnzone4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone5Column {
                get {
                    return this.columnzone5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone6Column {
                get {
                    return this.columnzone6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone7Column {
                get {
                    return this.columnzone7;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zone8Column {
                get {
                    return this.columnzone8;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalamtColumn {
                get {
                    return this.columntotalamt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsRow this[int index] {
                get {
                    return ((zone_sbsRow)(this.Rows[index]));
                }
            }
            
            public event zone_sbsRowChangeEventHandler zone_sbsRowChanging;
            
            public event zone_sbsRowChangeEventHandler zone_sbsRowChanged;
            
            public event zone_sbsRowChangeEventHandler zone_sbsRowDeleting;
            
            public event zone_sbsRowChangeEventHandler zone_sbsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addzone_sbsRow(zone_sbsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsRow Addzone_sbsRow(decimal zone1, decimal zone2, decimal zone3, decimal zone4, decimal zone5, decimal zone6, decimal zone7, decimal zone8, decimal totalamt) {
                zone_sbsRow rowzone_sbsRow = ((zone_sbsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        zone1,
                        zone2,
                        zone3,
                        zone4,
                        zone5,
                        zone6,
                        zone7,
                        zone8,
                        totalamt};
                rowzone_sbsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowzone_sbsRow);
                return rowzone_sbsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                zone_sbsDataTable cln = ((zone_sbsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new zone_sbsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnzone1 = base.Columns["zone1"];
                this.columnzone2 = base.Columns["zone2"];
                this.columnzone3 = base.Columns["zone3"];
                this.columnzone4 = base.Columns["zone4"];
                this.columnzone5 = base.Columns["zone5"];
                this.columnzone6 = base.Columns["zone6"];
                this.columnzone7 = base.Columns["zone7"];
                this.columnzone8 = base.Columns["zone8"];
                this.columntotalamt = base.Columns["totalamt"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnzone1 = new global::System.Data.DataColumn("zone1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone1);
                this.columnzone2 = new global::System.Data.DataColumn("zone2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone2);
                this.columnzone3 = new global::System.Data.DataColumn("zone3", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone3);
                this.columnzone4 = new global::System.Data.DataColumn("zone4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone4);
                this.columnzone5 = new global::System.Data.DataColumn("zone5", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone5);
                this.columnzone6 = new global::System.Data.DataColumn("zone6", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone6);
                this.columnzone7 = new global::System.Data.DataColumn("zone7", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone7);
                this.columnzone8 = new global::System.Data.DataColumn("zone8", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone8);
                this.columntotalamt = new global::System.Data.DataColumn("totalamt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotalamt);
                this.columnzone1.Caption = "DataColumn1";
                this.columnzone2.Caption = "DataColumn2";
                this.columnzone3.Caption = "DataColumn1";
                this.columnzone4.Caption = "DataColumn2";
                this.columnzone5.Caption = "DataColumn1";
                this.columnzone6.Caption = "DataColumn2";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsRow Newzone_sbsRow() {
                return ((zone_sbsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new zone_sbsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(zone_sbsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.zone_sbsRowChanged != null)) {
                    this.zone_sbsRowChanged(this, new zone_sbsRowChangeEvent(((zone_sbsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.zone_sbsRowChanging != null)) {
                    this.zone_sbsRowChanging(this, new zone_sbsRowChangeEvent(((zone_sbsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.zone_sbsRowDeleted != null)) {
                    this.zone_sbsRowDeleted(this, new zone_sbsRowChangeEvent(((zone_sbsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.zone_sbsRowDeleting != null)) {
                    this.zone_sbsRowDeleting(this, new zone_sbsRowChangeEvent(((zone_sbsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removezone_sbsRow(zone_sbsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "zone_sbsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NUDDataTable : global::System.Data.TypedTableBase<NUDRow> {
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columninvoice_date;
            
            private global::System.Data.DataColumn columnamount;
            
            private global::System.Data.DataColumn columnreason;
            
            private global::System.Data.DataColumn columndelstat;
            
            private global::System.Data.DataColumn columnpaidby;
            
            private global::System.Data.DataColumn columnattempts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDDataTable() {
                this.TableName = "NUD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NUDDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NUDDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_dateColumn {
                get {
                    return this.columninvoice_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn amountColumn {
                get {
                    return this.columnamount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn delstatColumn {
                get {
                    return this.columndelstat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn paidbyColumn {
                get {
                    return this.columnpaidby;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn attemptsColumn {
                get {
                    return this.columnattempts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRow this[int index] {
                get {
                    return ((NUDRow)(this.Rows[index]));
                }
            }
            
            public event NUDRowChangeEventHandler NUDRowChanging;
            
            public event NUDRowChangeEventHandler NUDRowChanged;
            
            public event NUDRowChangeEventHandler NUDRowDeleting;
            
            public event NUDRowChangeEventHandler NUDRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNUDRow(NUDRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRow AddNUDRow(string invoice_no, System.DateTime invoice_date, decimal amount, string reason, string delstat, string paidby, string attempts) {
                NUDRow rowNUDRow = ((NUDRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        invoice_no,
                        invoice_date,
                        amount,
                        reason,
                        delstat,
                        paidby,
                        attempts};
                rowNUDRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNUDRow);
                return rowNUDRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NUDDataTable cln = ((NUDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NUDDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columninvoice_date = base.Columns["invoice_date"];
                this.columnamount = base.Columns["amount"];
                this.columnreason = base.Columns["reason"];
                this.columndelstat = base.Columns["delstat"];
                this.columnpaidby = base.Columns["paidby"];
                this.columnattempts = base.Columns["attempts"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columninvoice_date = new global::System.Data.DataColumn("invoice_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_date);
                this.columnamount = new global::System.Data.DataColumn("amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnamount);
                this.columnreason = new global::System.Data.DataColumn("reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columndelstat = new global::System.Data.DataColumn("delstat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndelstat);
                this.columnpaidby = new global::System.Data.DataColumn("paidby", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpaidby);
                this.columnattempts = new global::System.Data.DataColumn("attempts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnattempts);
                this.columninvoice_no.Caption = "DataColumn1";
                this.columninvoice_date.Caption = "DataColumn1";
                this.columnamount.Caption = "DataColumn1";
                this.columnreason.Caption = "DataColumn1";
                this.columndelstat.Caption = "DataColumn1";
                this.columnpaidby.Caption = "DataColumn1";
                this.columnattempts.Caption = "DataColumn1";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRow NewNUDRow() {
                return ((NUDRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NUDRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NUDRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NUDRowChanged != null)) {
                    this.NUDRowChanged(this, new NUDRowChangeEvent(((NUDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NUDRowChanging != null)) {
                    this.NUDRowChanging(this, new NUDRowChangeEvent(((NUDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NUDRowDeleted != null)) {
                    this.NUDRowDeleted(this, new NUDRowChangeEvent(((NUDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NUDRowDeleting != null)) {
                    this.NUDRowDeleting(this, new NUDRowChangeEvent(((NUDRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNUDRow(NUDRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NUDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NUDRegisterDataTable : global::System.Data.TypedTableBase<NUDRegisterRow> {
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columninvoice_amt;
            
            private global::System.Data.DataColumn columninvoice_date;
            
            private global::System.Data.DataColumn columncustname;
            
            private global::System.Data.DataColumn columnzone;
            
            private global::System.Data.DataColumn columniscovered;
            
            private global::System.Data.DataColumn columnnud_amt;
            
            private global::System.Data.DataColumn columndelstat;
            
            private global::System.Data.DataColumn columnreason;
            
            private global::System.Data.DataColumn columnaccount;
            
            private global::System.Data.DataColumn columnsdrrno;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterDataTable() {
                this.TableName = "NUDRegister";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NUDRegisterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NUDRegisterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_amtColumn {
                get {
                    return this.columninvoice_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_dateColumn {
                get {
                    return this.columninvoice_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn custnameColumn {
                get {
                    return this.columncustname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn zoneColumn {
                get {
                    return this.columnzone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iscoveredColumn {
                get {
                    return this.columniscovered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nud_amtColumn {
                get {
                    return this.columnnud_amt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn delstatColumn {
                get {
                    return this.columndelstat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accountColumn {
                get {
                    return this.columnaccount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sdrrnoColumn {
                get {
                    return this.columnsdrrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterRow this[int index] {
                get {
                    return ((NUDRegisterRow)(this.Rows[index]));
                }
            }
            
            public event NUDRegisterRowChangeEventHandler NUDRegisterRowChanging;
            
            public event NUDRegisterRowChangeEventHandler NUDRegisterRowChanged;
            
            public event NUDRegisterRowChangeEventHandler NUDRegisterRowDeleting;
            
            public event NUDRegisterRowChangeEventHandler NUDRegisterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNUDRegisterRow(NUDRegisterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterRow AddNUDRegisterRow(string invoice_no, decimal invoice_amt, string invoice_date, string custname, string zone, string iscovered, decimal nud_amt, string delstat, string reason, string account, string sdrrno) {
                NUDRegisterRow rowNUDRegisterRow = ((NUDRegisterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        invoice_no,
                        invoice_amt,
                        invoice_date,
                        custname,
                        zone,
                        iscovered,
                        nud_amt,
                        delstat,
                        reason,
                        account,
                        sdrrno};
                rowNUDRegisterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNUDRegisterRow);
                return rowNUDRegisterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NUDRegisterDataTable cln = ((NUDRegisterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NUDRegisterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columninvoice_amt = base.Columns["invoice_amt"];
                this.columninvoice_date = base.Columns["invoice_date"];
                this.columncustname = base.Columns["custname"];
                this.columnzone = base.Columns["zone"];
                this.columniscovered = base.Columns["iscovered"];
                this.columnnud_amt = base.Columns["nud_amt"];
                this.columndelstat = base.Columns["delstat"];
                this.columnreason = base.Columns["reason"];
                this.columnaccount = base.Columns["account"];
                this.columnsdrrno = base.Columns["sdrrno"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columninvoice_amt = new global::System.Data.DataColumn("invoice_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_amt);
                this.columninvoice_date = new global::System.Data.DataColumn("invoice_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_date);
                this.columncustname = new global::System.Data.DataColumn("custname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustname);
                this.columnzone = new global::System.Data.DataColumn("zone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnzone);
                this.columniscovered = new global::System.Data.DataColumn("iscovered", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniscovered);
                this.columnnud_amt = new global::System.Data.DataColumn("nud_amt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnud_amt);
                this.columndelstat = new global::System.Data.DataColumn("delstat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndelstat);
                this.columnreason = new global::System.Data.DataColumn("reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnaccount = new global::System.Data.DataColumn("account", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccount);
                this.columnsdrrno = new global::System.Data.DataColumn("sdrrno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsdrrno);
                this.columninvoice_no.Caption = "DataColumn1";
                this.columninvoice_amt.Caption = "DataColumn1";
                this.columninvoice_date.Caption = "DataColumn1";
                this.columncustname.Caption = "DataColumn1";
                this.columnzone.Caption = "DataColumn1";
                this.columniscovered.Caption = "DataColumn1";
                this.columnnud_amt.Caption = "DataColumn1";
                this.columndelstat.Caption = "DataColumn1";
                this.columnreason.Caption = "DataColumn1";
                this.columnaccount.Caption = "DataColumn1";
                this.columnsdrrno.Caption = "DataColumn1";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterRow NewNUDRegisterRow() {
                return ((NUDRegisterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NUDRegisterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NUDRegisterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NUDRegisterRowChanged != null)) {
                    this.NUDRegisterRowChanged(this, new NUDRegisterRowChangeEvent(((NUDRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NUDRegisterRowChanging != null)) {
                    this.NUDRegisterRowChanging(this, new NUDRegisterRowChangeEvent(((NUDRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NUDRegisterRowDeleted != null)) {
                    this.NUDRegisterRowDeleted(this, new NUDRegisterRowChangeEvent(((NUDRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NUDRegisterRowDeleting != null)) {
                    this.NUDRegisterRowDeleting(this, new NUDRegisterRowChangeEvent(((NUDRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNUDRegisterRow(NUDRegisterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NUDRegisterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class delstatusreportDataTable : global::System.Data.TypedTableBase<delstatusreportRow> {
            
            private global::System.Data.DataColumn columnsdrrno;
            
            private global::System.Data.DataColumn columninvoice_no;
            
            private global::System.Data.DataColumn columninvoice_value;
            
            private global::System.Data.DataColumn columninvoice_date;
            
            private global::System.Data.DataColumn columndatedel;
            
            private global::System.Data.DataColumn columndelstat;
            
            private global::System.Data.DataColumn columntripdate;
            
            private global::System.Data.DataColumn columntripno;
            
            private global::System.Data.DataColumn columncustomer;
            
            private global::System.Data.DataColumn columnclient;
            
            private global::System.Data.DataColumn columnismtd;
            
            private global::System.Data.DataColumn columntriptype;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportDataTable() {
                this.TableName = "delstatusreport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal delstatusreportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected delstatusreportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sdrrnoColumn {
                get {
                    return this.columnsdrrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_noColumn {
                get {
                    return this.columninvoice_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_valueColumn {
                get {
                    return this.columninvoice_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn invoice_dateColumn {
                get {
                    return this.columninvoice_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn datedelColumn {
                get {
                    return this.columndatedel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn delstatColumn {
                get {
                    return this.columndelstat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tripdateColumn {
                get {
                    return this.columntripdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tripnoColumn {
                get {
                    return this.columntripno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn customerColumn {
                get {
                    return this.columncustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clientColumn {
                get {
                    return this.columnclient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ismtdColumn {
                get {
                    return this.columnismtd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn triptypeColumn {
                get {
                    return this.columntriptype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportRow this[int index] {
                get {
                    return ((delstatusreportRow)(this.Rows[index]));
                }
            }
            
            public event delstatusreportRowChangeEventHandler delstatusreportRowChanging;
            
            public event delstatusreportRowChangeEventHandler delstatusreportRowChanged;
            
            public event delstatusreportRowChangeEventHandler delstatusreportRowDeleting;
            
            public event delstatusreportRowChangeEventHandler delstatusreportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddelstatusreportRow(delstatusreportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportRow AdddelstatusreportRow(string sdrrno, string invoice_no, decimal invoice_value, string invoice_date, string datedel, string delstat, string tripdate, string tripno, string customer, string client, string ismtd, string triptype) {
                delstatusreportRow rowdelstatusreportRow = ((delstatusreportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        sdrrno,
                        invoice_no,
                        invoice_value,
                        invoice_date,
                        datedel,
                        delstat,
                        tripdate,
                        tripno,
                        customer,
                        client,
                        ismtd,
                        triptype};
                rowdelstatusreportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdelstatusreportRow);
                return rowdelstatusreportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                delstatusreportDataTable cln = ((delstatusreportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new delstatusreportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsdrrno = base.Columns["sdrrno"];
                this.columninvoice_no = base.Columns["invoice_no"];
                this.columninvoice_value = base.Columns["invoice_value"];
                this.columninvoice_date = base.Columns["invoice_date"];
                this.columndatedel = base.Columns["datedel"];
                this.columndelstat = base.Columns["delstat"];
                this.columntripdate = base.Columns["tripdate"];
                this.columntripno = base.Columns["tripno"];
                this.columncustomer = base.Columns["customer"];
                this.columnclient = base.Columns["client"];
                this.columnismtd = base.Columns["ismtd"];
                this.columntriptype = base.Columns["triptype"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsdrrno = new global::System.Data.DataColumn("sdrrno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsdrrno);
                this.columninvoice_no = new global::System.Data.DataColumn("invoice_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_no);
                this.columninvoice_value = new global::System.Data.DataColumn("invoice_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_value);
                this.columninvoice_date = new global::System.Data.DataColumn("invoice_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninvoice_date);
                this.columndatedel = new global::System.Data.DataColumn("datedel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndatedel);
                this.columndelstat = new global::System.Data.DataColumn("delstat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndelstat);
                this.columntripdate = new global::System.Data.DataColumn("tripdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntripdate);
                this.columntripno = new global::System.Data.DataColumn("tripno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntripno);
                this.columncustomer = new global::System.Data.DataColumn("customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncustomer);
                this.columnclient = new global::System.Data.DataColumn("client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclient);
                this.columnismtd = new global::System.Data.DataColumn("ismtd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnismtd);
                this.columntriptype = new global::System.Data.DataColumn("triptype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntriptype);
                this.columninvoice_no.Caption = "DataColumn1";
                this.columninvoice_value.Caption = "DataColumn1";
                this.columndatedel.Caption = "DataColumn1";
                this.columndelstat.Caption = "DataColumn1";
                this.columntripno.Caption = "DataColumn1";
                this.columnismtd.DefaultValue = ((string)("Month To Date"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportRow NewdelstatusreportRow() {
                return ((delstatusreportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new delstatusreportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(delstatusreportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.delstatusreportRowChanged != null)) {
                    this.delstatusreportRowChanged(this, new delstatusreportRowChangeEvent(((delstatusreportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.delstatusreportRowChanging != null)) {
                    this.delstatusreportRowChanging(this, new delstatusreportRowChangeEvent(((delstatusreportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.delstatusreportRowDeleted != null)) {
                    this.delstatusreportRowDeleted(this, new delstatusreportRowChangeEvent(((delstatusreportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.delstatusreportRowDeleting != null)) {
                    this.delstatusreportRowDeleting(this, new delstatusreportRowChangeEvent(((delstatusreportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedelstatusreportRow(delstatusreportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Reports ds = new Reports();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "delstatusreportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TransactionRow : global::System.Data.DataRow {
            
            private TransactionDataTable tableTransaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TransactionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransaction = ((TransactionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _sdrrno {
                get {
                    try {
                        return ((int)(this[this.tableTransaction._sdrrnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'_sdrrno\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction._sdrrnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoice_no {
                get {
                    try {
                        return ((int)(this[this.tableTransaction.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_date {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.invoice_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_date\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.invoice_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal noOfBox {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.noOfBoxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'noOfBox\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.noOfBoxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string custName {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.custNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'custName\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.custNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pdcamt {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.pdcamtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pdcamt\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.pdcamtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal codamt {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.codamtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'codamt\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.codamtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal pdcamt1 {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.pdcamt1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pdcamt1\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.pdcamt1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string driver {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.driverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driver\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.driverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helper {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.helperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'helper\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.helperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string route {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.routeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.routeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTransaction.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string telno {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.telnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'telno\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.telnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalpdc {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.totalpdcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalpdc\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.totalpdcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalcod {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.totalcodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalcod\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.totalcodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prepby {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.prepbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prepby\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.prepbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tvalueship {
                get {
                    try {
                        return ((decimal)(this[this.tableTransaction.tvalueshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tvalueship\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.tvalueshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helper1 {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.helper1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'helper1\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.helper1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nc {
                get {
                    try {
                        return ((string)(this[this.tableTransaction.ncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nc\' in table \'Transaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransaction.ncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_sdrrnoNull() {
                return this.IsNull(this.tableTransaction._sdrrnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_sdrrnoNull() {
                this[this.tableTransaction._sdrrnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tableTransaction.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tableTransaction.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_dateNull() {
                return this.IsNull(this.tableTransaction.invoice_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_dateNull() {
                this[this.tableTransaction.invoice_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnoOfBoxNull() {
                return this.IsNull(this.tableTransaction.noOfBoxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnoOfBoxNull() {
                this[this.tableTransaction.noOfBoxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustNameNull() {
                return this.IsNull(this.tableTransaction.custNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustNameNull() {
                this[this.tableTransaction.custNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspdcamtNull() {
                return this.IsNull(this.tableTransaction.pdcamtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpdcamtNull() {
                this[this.tableTransaction.pdcamtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscodamtNull() {
                return this.IsNull(this.tableTransaction.codamtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcodamtNull() {
                this[this.tableTransaction.codamtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispdcamt1Null() {
                return this.IsNull(this.tableTransaction.pdcamt1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpdcamt1Null() {
                this[this.tableTransaction.pdcamt1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdriverNull() {
                return this.IsNull(this.tableTransaction.driverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdriverNull() {
                this[this.tableTransaction.driverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshelperNull() {
                return this.IsNull(this.tableTransaction.helperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethelperNull() {
                this[this.tableTransaction.helperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrouteNull() {
                return this.IsNull(this.tableTransaction.routeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrouteNull() {
                this[this.tableTransaction.routeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tableTransaction.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tableTransaction.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tableTransaction.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tableTransaction.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstelnoNull() {
                return this.IsNull(this.tableTransaction.telnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettelnoNull() {
                this[this.tableTransaction.telnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalpdcNull() {
                return this.IsNull(this.tableTransaction.totalpdcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalpdcNull() {
                this[this.tableTransaction.totalpdcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalcodNull() {
                return this.IsNull(this.tableTransaction.totalcodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalcodNull() {
                this[this.tableTransaction.totalcodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprepbyNull() {
                return this.IsNull(this.tableTransaction.prepbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprepbyNull() {
                this[this.tableTransaction.prepbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstvalueshipNull() {
                return this.IsNull(this.tableTransaction.tvalueshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettvalueshipNull() {
                this[this.tableTransaction.tvalueshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishelper1Null() {
                return this.IsNull(this.tableTransaction.helper1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethelper1Null() {
                this[this.tableTransaction.helper1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsncNull() {
                return this.IsNull(this.tableTransaction.ncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetncNull() {
                this[this.tableTransaction.ncColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReturnRow : global::System.Data.DataRow {
            
            private ReturnDataTable tableReturn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReturnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReturn = ((ReturnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoice_no {
                get {
                    return ((int)(this[this.tableReturn.invoice_noColumn]));
                }
                set {
                    this[this.tableReturn.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int cutItemno {
                get {
                    try {
                        return ((int)(this[this.tableReturn.cutItemnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cutItemno\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.cutItemnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableReturn.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string route {
                get {
                    try {
                        return ((string)(this[this.tableReturn.routeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'route\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.routeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tableReturn.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tamount {
                get {
                    try {
                        return ((decimal)(this[this.tableReturn.tamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tamount\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.tamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prodcode {
                get {
                    try {
                        return ((string)(this[this.tableReturn.prodcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prodcode\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.prodcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prodname {
                get {
                    try {
                        return ((string)(this[this.tableReturn.prodnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prodname\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.prodnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal unitp {
                get {
                    try {
                        return ((decimal)(this[this.tableReturn.unitpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unitp\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.unitpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string uom {
                get {
                    try {
                        return ((string)(this[this.tableReturn.uomColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uom\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.uomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal dstock {
                get {
                    try {
                        return ((decimal)(this[this.tableReturn.dstockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dstock\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.dstockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal amount {
                get {
                    try {
                        return ((decimal)(this[this.tableReturn.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal gstock {
                get {
                    try {
                        return ((decimal)(this[this.tableReturn.gstockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gstock\' in table \'Return\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReturn.gstockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscutItemnoNull() {
                return this.IsNull(this.tableReturn.cutItemnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcutItemnoNull() {
                this[this.tableReturn.cutItemnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableReturn.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableReturn.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrouteNull() {
                return this.IsNull(this.tableReturn.routeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrouteNull() {
                this[this.tableReturn.routeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tableReturn.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tableReturn.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstamountNull() {
                return this.IsNull(this.tableReturn.tamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettamountNull() {
                this[this.tableReturn.tamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprodcodeNull() {
                return this.IsNull(this.tableReturn.prodcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprodcodeNull() {
                this[this.tableReturn.prodcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprodnameNull() {
                return this.IsNull(this.tableReturn.prodnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprodnameNull() {
                this[this.tableReturn.prodnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitpNull() {
                return this.IsNull(this.tableReturn.unitpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitpNull() {
                this[this.tableReturn.unitpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuomNull() {
                return this.IsNull(this.tableReturn.uomColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuomNull() {
                this[this.tableReturn.uomColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdstockNull() {
                return this.IsNull(this.tableReturn.dstockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdstockNull() {
                this[this.tableReturn.dstockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tableReturn.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tableReturn.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgstockNull() {
                return this.IsNull(this.tableReturn.gstockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgstockNull() {
                this[this.tableReturn.gstockColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UpdateSdrrRow : global::System.Data.DataRow {
            
            private UpdateSdrrDataTable tableUpdateSdrr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UpdateSdrrRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUpdateSdrr = ((UpdateSdrrDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sdrrNo {
                get {
                    try {
                        return ((int)(this[this.tableUpdateSdrr.sdrrNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sdrrNo\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.sdrrNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoice_no {
                get {
                    try {
                        return ((int)(this[this.tableUpdateSdrr.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime datedel {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUpdateSdrr.datedelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datedel\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.datedelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'status\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remarks {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.remarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'remarks\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.remarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string driver {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.driverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'driver\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.driverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helper {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.helperColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'helper\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.helperColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string helper2 {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.helper2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'helper2\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.helper2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int truksno {
                get {
                    try {
                        return ((int)(this[this.tableUpdateSdrr.truksnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'truksno\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.truksnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime leftwrhse {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUpdateSdrr.leftwrhseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'leftwrhse\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.leftwrhseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime arrvdwrhse {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUpdateSdrr.arrvdwrhseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'arrvdwrhse\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.arrvdwrhseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal invoice_value {
                get {
                    try {
                        return ((decimal)(this[this.tableUpdateSdrr.invoice_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_value\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.invoice_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string customer_name {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.customer_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'customer_name\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.customer_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cases {
                get {
                    try {
                        return ((string)(this[this.tableUpdateSdrr.casesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'cases\' in table \'UpdateSdrr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUpdateSdrr.casesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssdrrNoNull() {
                return this.IsNull(this.tableUpdateSdrr.sdrrNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsdrrNoNull() {
                this[this.tableUpdateSdrr.sdrrNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tableUpdateSdrr.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tableUpdateSdrr.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatedelNull() {
                return this.IsNull(this.tableUpdateSdrr.datedelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatedelNull() {
                this[this.tableUpdateSdrr.datedelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableUpdateSdrr.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableUpdateSdrr.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarksNull() {
                return this.IsNull(this.tableUpdateSdrr.remarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarksNull() {
                this[this.tableUpdateSdrr.remarksColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdriverNull() {
                return this.IsNull(this.tableUpdateSdrr.driverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdriverNull() {
                this[this.tableUpdateSdrr.driverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshelperNull() {
                return this.IsNull(this.tableUpdateSdrr.helperColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethelperNull() {
                this[this.tableUpdateSdrr.helperColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishelper2Null() {
                return this.IsNull(this.tableUpdateSdrr.helper2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethelper2Null() {
                this[this.tableUpdateSdrr.helper2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstruksnoNull() {
                return this.IsNull(this.tableUpdateSdrr.truksnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettruksnoNull() {
                this[this.tableUpdateSdrr.truksnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleftwrhseNull() {
                return this.IsNull(this.tableUpdateSdrr.leftwrhseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleftwrhseNull() {
                this[this.tableUpdateSdrr.leftwrhseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarrvdwrhseNull() {
                return this.IsNull(this.tableUpdateSdrr.arrvdwrhseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarrvdwrhseNull() {
                this[this.tableUpdateSdrr.arrvdwrhseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tableUpdateSdrr.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tableUpdateSdrr.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_valueNull() {
                return this.IsNull(this.tableUpdateSdrr.invoice_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_valueNull() {
                this[this.tableUpdateSdrr.invoice_valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscustomer_nameNull() {
                return this.IsNull(this.tableUpdateSdrr.customer_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcustomer_nameNull() {
                this[this.tableUpdateSdrr.customer_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscasesNull() {
                return this.IsNull(this.tableUpdateSdrr.casesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcasesNull() {
                this[this.tableUpdateSdrr.casesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TradeReturnRow : global::System.Data.DataRow {
            
            private TradeReturnDataTable tableTradeReturn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TradeReturnRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTradeReturn = ((TradeReturnDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int docNo {
                get {
                    try {
                        return ((int)(this[this.tableTradeReturn.docNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'docNo\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.docNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string custName {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.custNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'custName\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.custNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int si {
                get {
                    try {
                        return ((int)(this[this.tableTradeReturn.siColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'si\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.siColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTradeReturn.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string apprby {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.apprbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'apprby\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.apprbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal tamount {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.tamountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tamount\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.tamountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prodcode {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.prodcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prodcode\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.prodcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prodname {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.prodnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prodname\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.prodnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal qcases {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.qcasesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qcases\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.qcasesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal qpcs {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.qpcsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qpcs\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.qpcsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Ucases {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.UcasesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ucases\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.UcasesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Upcs {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.UpcsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Upcs\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.UpcsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal amount {
                get {
                    try {
                        return ((decimal)(this[this.tableTradeReturn.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableTradeReturn.reasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reason\' in table \'TradeReturn\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTradeReturn.reasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tableTradeReturn.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tableTradeReturn.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocNoNull() {
                return this.IsNull(this.tableTradeReturn.docNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocNoNull() {
                this[this.tableTradeReturn.docNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustNameNull() {
                return this.IsNull(this.tableTradeReturn.custNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustNameNull() {
                this[this.tableTradeReturn.custNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssiNull() {
                return this.IsNull(this.tableTradeReturn.siColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsiNull() {
                this[this.tableTradeReturn.siColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tableTradeReturn.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tableTradeReturn.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsapprbyNull() {
                return this.IsNull(this.tableTradeReturn.apprbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetapprbyNull() {
                this[this.tableTradeReturn.apprbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstamountNull() {
                return this.IsNull(this.tableTradeReturn.tamountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettamountNull() {
                this[this.tableTradeReturn.tamountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprodcodeNull() {
                return this.IsNull(this.tableTradeReturn.prodcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprodcodeNull() {
                this[this.tableTradeReturn.prodcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprodnameNull() {
                return this.IsNull(this.tableTradeReturn.prodnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprodnameNull() {
                this[this.tableTradeReturn.prodnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqcasesNull() {
                return this.IsNull(this.tableTradeReturn.qcasesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqcasesNull() {
                this[this.tableTradeReturn.qcasesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqpcsNull() {
                return this.IsNull(this.tableTradeReturn.qpcsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqpcsNull() {
                this[this.tableTradeReturn.qpcsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUcasesNull() {
                return this.IsNull(this.tableTradeReturn.UcasesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUcasesNull() {
                this[this.tableTradeReturn.UcasesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpcsNull() {
                return this.IsNull(this.tableTradeReturn.UpcsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpcsNull() {
                this[this.tableTradeReturn.UpcsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tableTradeReturn.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tableTradeReturn.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableTradeReturn.reasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableTradeReturn.reasonColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class crtCutIndexRow : global::System.Data.DataRow {
            
            private crtCutIndexDataTable tablecrtCutIndex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal crtCutIndexRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecrtCutIndex = ((crtCutIndexDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rowindex {
                get {
                    try {
                        return ((int)(this[this.tablecrtCutIndex.rowindexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rowindex\' in table \'crtCutIndex\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecrtCutIndex.rowindexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowindexNull() {
                return this.IsNull(this.tablecrtCutIndex.rowindexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowindexNull() {
                this[this.tablecrtCutIndex.rowindexColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalesInvoiceRegisterRow : global::System.Data.DataRow {
            
            private SalesInvoiceRegisterDataTable tableSalesInvoiceRegister;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalesInvoiceRegisterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesInvoiceRegister = ((SalesInvoiceRegisterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNo {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.TripNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripNo\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.TripNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PlateNo {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.PlateNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlateNo\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.PlateNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TruckType {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.TruckTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TruckType\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.TruckTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Client {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.ClientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Client\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.ClientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SDRRNo {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.SDRRNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDRRNo\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.SDRRNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string isCovered {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.isCoveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isCovered\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.isCoveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNo {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.InvoiceNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNo\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.InvoiceNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableSalesInvoiceRegister.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateRec {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.DateRecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRec\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.DateRecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remarks {
                get {
                    try {
                        return ((string)(this[this.tableSalesInvoiceRegister.RemarksColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remarks\' in table \'SalesInvoiceRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesInvoiceRegister.RemarksColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNoNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.TripNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNoNull() {
                this[this.tableSalesInvoiceRegister.TripNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlateNoNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.PlateNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlateNoNull() {
                this[this.tableSalesInvoiceRegister.PlateNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTruckTypeNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.TruckTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTruckTypeNull() {
                this[this.tableSalesInvoiceRegister.TruckTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.ClientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNull() {
                this[this.tableSalesInvoiceRegister.ClientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSDRRNoNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.SDRRNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSDRRNoNull() {
                this[this.tableSalesInvoiceRegister.SDRRNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNull() {
                this[this.tableSalesInvoiceRegister.CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableSalesInvoiceRegister.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisCoveredNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.isCoveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisCoveredNull() {
                this[this.tableSalesInvoiceRegister.isCoveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNoNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.InvoiceNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNoNull() {
                this[this.tableSalesInvoiceRegister.InvoiceNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableSalesInvoiceRegister.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRecNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.DateRecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRecNull() {
                this[this.tableSalesInvoiceRegister.DateRecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSalesInvoiceRegister.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarksNull() {
                return this.IsNull(this.tableSalesInvoiceRegister.RemarksColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarksNull() {
                this[this.tableSalesInvoiceRegister.RemarksColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RMRregisterRow : global::System.Data.DataRow {
            
            private RMRregisterDataTable tableRMRregister;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RMRregisterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRMRregister = ((RMRregisterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime month {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRMRregister.monthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'month\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.monthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int invoice_no {
                get {
                    try {
                        return ((int)(this[this.tableRMRregister.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string custname {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.custnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'custname\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.custnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal invoice_value {
                get {
                    try {
                        return ((decimal)(this[this.tableRMRregister.invoice_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_value\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.invoice_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string uom {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.uomColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uom\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.uomColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal qty {
                get {
                    try {
                        return ((decimal)(this[this.tableRMRregister.qtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qty\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.qtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string condition {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.conditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'condition\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.conditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prepby {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.prepbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'prepby\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.prepbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chckby {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.chckbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'chckby\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.chckbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zone {
                get {
                    try {
                        return ((string)(this[this.tableRMRregister.zoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone\' in table \'RMRregister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRMRregister.zoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmonthNull() {
                return this.IsNull(this.tableRMRregister.monthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmonthNull() {
                this[this.tableRMRregister.monthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tableRMRregister.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tableRMRregister.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tableRMRregister.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tableRMRregister.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustnameNull() {
                return this.IsNull(this.tableRMRregister.custnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustnameNull() {
                this[this.tableRMRregister.custnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_valueNull() {
                return this.IsNull(this.tableRMRregister.invoice_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_valueNull() {
                this[this.tableRMRregister.invoice_valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuomNull() {
                return this.IsNull(this.tableRMRregister.uomColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuomNull() {
                this[this.tableRMRregister.uomColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqtyNull() {
                return this.IsNull(this.tableRMRregister.qtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqtyNull() {
                this[this.tableRMRregister.qtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconditionNull() {
                return this.IsNull(this.tableRMRregister.conditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconditionNull() {
                this[this.tableRMRregister.conditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsprepbyNull() {
                return this.IsNull(this.tableRMRregister.prepbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetprepbyNull() {
                this[this.tableRMRregister.prepbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschckbyNull() {
                return this.IsNull(this.tableRMRregister.chckbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchckbyNull() {
                this[this.tableRMRregister.chckbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszoneNull() {
                return this.IsNull(this.tableRMRregister.zoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzoneNull() {
                this[this.tableRMRregister.zoneColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ListOfAllSDRRRow : global::System.Data.DataRow {
            
            private ListOfAllSDRRDataTable tableListOfAllSDRR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ListOfAllSDRRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableListOfAllSDRR = ((ListOfAllSDRRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TripNo {
                get {
                    try {
                        return ((string)(this[this.tableListOfAllSDRR.TripNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TripNo\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.TripNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SDRRDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableListOfAllSDRR.SDRRDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDRRDate\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.SDRRDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SDRRNo {
                get {
                    try {
                        return ((string)(this[this.tableListOfAllSDRR.SDRRNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDRRNo\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.SDRRNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Client {
                get {
                    try {
                        return ((string)(this[this.tableListOfAllSDRR.ClientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Client\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.ClientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Route {
                get {
                    try {
                        return ((string)(this[this.tableListOfAllSDRR.RouteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Route\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.RouteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zone {
                get {
                    try {
                        return ((string)(this[this.tableListOfAllSDRR.ZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Zone\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.ZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cartons {
                get {
                    try {
                        return ((decimal)(this[this.tableListOfAllSDRR.CartonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cartons\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.CartonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableListOfAllSDRR.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'ListOfAllSDRR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListOfAllSDRR.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTripNoNull() {
                return this.IsNull(this.tableListOfAllSDRR.TripNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTripNoNull() {
                this[this.tableListOfAllSDRR.TripNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSDRRDateNull() {
                return this.IsNull(this.tableListOfAllSDRR.SDRRDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSDRRDateNull() {
                this[this.tableListOfAllSDRR.SDRRDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSDRRNoNull() {
                return this.IsNull(this.tableListOfAllSDRR.SDRRNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSDRRNoNull() {
                this[this.tableListOfAllSDRR.SDRRNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNull() {
                return this.IsNull(this.tableListOfAllSDRR.ClientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNull() {
                this[this.tableListOfAllSDRR.ClientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRouteNull() {
                return this.IsNull(this.tableListOfAllSDRR.RouteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRouteNull() {
                this[this.tableListOfAllSDRR.RouteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneNull() {
                return this.IsNull(this.tableListOfAllSDRR.ZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneNull() {
                this[this.tableListOfAllSDRR.ZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCartonsNull() {
                return this.IsNull(this.tableListOfAllSDRR.CartonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCartonsNull() {
                this[this.tableListOfAllSDRR.CartonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableListOfAllSDRR.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableListOfAllSDRR.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class zone_sbsRow : global::System.Data.DataRow {
            
            private zone_sbsDataTable tablezone_sbs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zone_sbsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablezone_sbs = ((zone_sbsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone1 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone1\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone2 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone2\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone3 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone3\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone4 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone4\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone5 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone5\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone6 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone6Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone6\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone7 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone7Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone7\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone7Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal zone8 {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.zone8Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone8\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.zone8Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totalamt {
                get {
                    try {
                        return ((decimal)(this[this.tablezone_sbs.totalamtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'totalamt\' in table \'zone_sbs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone_sbs.totalamtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone1Null() {
                return this.IsNull(this.tablezone_sbs.zone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone1Null() {
                this[this.tablezone_sbs.zone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone2Null() {
                return this.IsNull(this.tablezone_sbs.zone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone2Null() {
                this[this.tablezone_sbs.zone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone3Null() {
                return this.IsNull(this.tablezone_sbs.zone3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone3Null() {
                this[this.tablezone_sbs.zone3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone4Null() {
                return this.IsNull(this.tablezone_sbs.zone4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone4Null() {
                this[this.tablezone_sbs.zone4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone5Null() {
                return this.IsNull(this.tablezone_sbs.zone5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone5Null() {
                this[this.tablezone_sbs.zone5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone6Null() {
                return this.IsNull(this.tablezone_sbs.zone6Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone6Null() {
                this[this.tablezone_sbs.zone6Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone7Null() {
                return this.IsNull(this.tablezone_sbs.zone7Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone7Null() {
                this[this.tablezone_sbs.zone7Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszone8Null() {
                return this.IsNull(this.tablezone_sbs.zone8Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzone8Null() {
                this[this.tablezone_sbs.zone8Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalamtNull() {
                return this.IsNull(this.tablezone_sbs.totalamtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalamtNull() {
                this[this.tablezone_sbs.totalamtColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NUDRow : global::System.Data.DataRow {
            
            private NUDDataTable tableNUD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NUDRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNUD = ((NUDDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_no {
                get {
                    try {
                        return ((string)(this[this.tableNUD.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime invoice_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableNUD.invoice_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_date\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.invoice_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal amount {
                get {
                    try {
                        return ((decimal)(this[this.tableNUD.amountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'amount\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.amountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableNUD.reasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reason\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.reasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string delstat {
                get {
                    try {
                        return ((string)(this[this.tableNUD.delstatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'delstat\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.delstatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string paidby {
                get {
                    try {
                        return ((string)(this[this.tableNUD.paidbyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'paidby\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.paidbyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string attempts {
                get {
                    try {
                        return ((string)(this[this.tableNUD.attemptsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'attempts\' in table \'NUD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUD.attemptsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tableNUD.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tableNUD.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_dateNull() {
                return this.IsNull(this.tableNUD.invoice_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_dateNull() {
                this[this.tableNUD.invoice_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsamountNull() {
                return this.IsNull(this.tableNUD.amountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetamountNull() {
                this[this.tableNUD.amountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableNUD.reasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableNUD.reasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelstatNull() {
                return this.IsNull(this.tableNUD.delstatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelstatNull() {
                this[this.tableNUD.delstatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspaidbyNull() {
                return this.IsNull(this.tableNUD.paidbyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpaidbyNull() {
                this[this.tableNUD.paidbyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsattemptsNull() {
                return this.IsNull(this.tableNUD.attemptsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetattemptsNull() {
                this[this.tableNUD.attemptsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NUDRegisterRow : global::System.Data.DataRow {
            
            private NUDRegisterDataTable tableNUDRegister;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NUDRegisterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNUDRegister = ((NUDRegisterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_no {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal invoice_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableNUDRegister.invoice_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_amt\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.invoice_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_date {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.invoice_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_date\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.invoice_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string custname {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.custnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'custname\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.custnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zone {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.zoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'zone\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.zoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string iscovered {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.iscoveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'iscovered\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.iscoveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal nud_amt {
                get {
                    try {
                        return ((decimal)(this[this.tableNUDRegister.nud_amtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nud_amt\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.nud_amtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string delstat {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.delstatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'delstat\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.delstatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.reasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reason\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.reasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string account {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.accountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'account\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.accountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sdrrno {
                get {
                    try {
                        return ((string)(this[this.tableNUDRegister.sdrrnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sdrrno\' in table \'NUDRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNUDRegister.sdrrnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tableNUDRegister.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tableNUDRegister.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_amtNull() {
                return this.IsNull(this.tableNUDRegister.invoice_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_amtNull() {
                this[this.tableNUDRegister.invoice_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_dateNull() {
                return this.IsNull(this.tableNUDRegister.invoice_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_dateNull() {
                this[this.tableNUDRegister.invoice_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustnameNull() {
                return this.IsNull(this.tableNUDRegister.custnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustnameNull() {
                this[this.tableNUDRegister.custnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszoneNull() {
                return this.IsNull(this.tableNUDRegister.zoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzoneNull() {
                this[this.tableNUDRegister.zoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiscoveredNull() {
                return this.IsNull(this.tableNUDRegister.iscoveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetiscoveredNull() {
                this[this.tableNUDRegister.iscoveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnud_amtNull() {
                return this.IsNull(this.tableNUDRegister.nud_amtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnud_amtNull() {
                this[this.tableNUDRegister.nud_amtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelstatNull() {
                return this.IsNull(this.tableNUDRegister.delstatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelstatNull() {
                this[this.tableNUDRegister.delstatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableNUDRegister.reasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableNUDRegister.reasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaccountNull() {
                return this.IsNull(this.tableNUDRegister.accountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaccountNull() {
                this[this.tableNUDRegister.accountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssdrrnoNull() {
                return this.IsNull(this.tableNUDRegister.sdrrnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsdrrnoNull() {
                this[this.tableNUDRegister.sdrrnoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class delstatusreportRow : global::System.Data.DataRow {
            
            private delstatusreportDataTable tabledelstatusreport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal delstatusreportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledelstatusreport = ((delstatusreportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sdrrno {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.sdrrnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sdrrno\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.sdrrnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_no {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.invoice_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_no\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.invoice_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal invoice_value {
                get {
                    try {
                        return ((decimal)(this[this.tabledelstatusreport.invoice_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_value\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.invoice_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string invoice_date {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.invoice_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'invoice_date\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.invoice_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string datedel {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.datedelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'datedel\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.datedelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string delstat {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.delstatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'delstat\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.delstatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tripdate {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.tripdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tripdate\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.tripdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tripno {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.tripnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tripno\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.tripnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string customer {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.customerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'customer\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.customerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string client {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.clientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'client\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.clientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ismtd {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.ismtdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ismtd\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.ismtdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string triptype {
                get {
                    try {
                        return ((string)(this[this.tabledelstatusreport.triptypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'triptype\' in table \'delstatusreport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledelstatusreport.triptypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssdrrnoNull() {
                return this.IsNull(this.tabledelstatusreport.sdrrnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsdrrnoNull() {
                this[this.tabledelstatusreport.sdrrnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_noNull() {
                return this.IsNull(this.tabledelstatusreport.invoice_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_noNull() {
                this[this.tabledelstatusreport.invoice_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_valueNull() {
                return this.IsNull(this.tabledelstatusreport.invoice_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_valueNull() {
                this[this.tabledelstatusreport.invoice_valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinvoice_dateNull() {
                return this.IsNull(this.tabledelstatusreport.invoice_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinvoice_dateNull() {
                this[this.tabledelstatusreport.invoice_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdatedelNull() {
                return this.IsNull(this.tabledelstatusreport.datedelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdatedelNull() {
                this[this.tabledelstatusreport.datedelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdelstatNull() {
                return this.IsNull(this.tabledelstatusreport.delstatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdelstatNull() {
                this[this.tabledelstatusreport.delstatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstripdateNull() {
                return this.IsNull(this.tabledelstatusreport.tripdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettripdateNull() {
                this[this.tabledelstatusreport.tripdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstripnoNull() {
                return this.IsNull(this.tabledelstatusreport.tripnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettripnoNull() {
                this[this.tabledelstatusreport.tripnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscustomerNull() {
                return this.IsNull(this.tabledelstatusreport.customerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcustomerNull() {
                this[this.tabledelstatusreport.customerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclientNull() {
                return this.IsNull(this.tabledelstatusreport.clientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclientNull() {
                this[this.tabledelstatusreport.clientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsismtdNull() {
                return this.IsNull(this.tabledelstatusreport.ismtdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetismtdNull() {
                this[this.tabledelstatusreport.ismtdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstriptypeNull() {
                return this.IsNull(this.tabledelstatusreport.triptypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettriptypeNull() {
                this[this.tabledelstatusreport.triptypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TransactionRowChangeEvent : global::System.EventArgs {
            
            private TransactionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionRowChangeEvent(TransactionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TransactionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReturnRowChangeEvent : global::System.EventArgs {
            
            private ReturnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRowChangeEvent(ReturnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReturnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UpdateSdrrRowChangeEvent : global::System.EventArgs {
            
            private UpdateSdrrRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrRowChangeEvent(UpdateSdrrRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UpdateSdrrRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TradeReturnRowChangeEvent : global::System.EventArgs {
            
            private TradeReturnRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnRowChangeEvent(TradeReturnRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TradeReturnRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class crtCutIndexRowChangeEvent : global::System.EventArgs {
            
            private crtCutIndexRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexRowChangeEvent(crtCutIndexRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public crtCutIndexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalesInvoiceRegisterRowChangeEvent : global::System.EventArgs {
            
            private SalesInvoiceRegisterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterRowChangeEvent(SalesInvoiceRegisterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalesInvoiceRegisterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RMRregisterRowChangeEvent : global::System.EventArgs {
            
            private RMRregisterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterRowChangeEvent(RMRregisterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RMRregisterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ListOfAllSDRRRowChangeEvent : global::System.EventArgs {
            
            private ListOfAllSDRRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRRowChangeEvent(ListOfAllSDRRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ListOfAllSDRRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class zone_sbsRowChangeEvent : global::System.EventArgs {
            
            private zone_sbsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsRowChangeEvent(zone_sbsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zone_sbsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NUDRowChangeEvent : global::System.EventArgs {
            
            private NUDRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRowChangeEvent(NUDRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NUDRegisterRowChangeEvent : global::System.EventArgs {
            
            private NUDRegisterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterRowChangeEvent(NUDRegisterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NUDRegisterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class delstatusreportRowChangeEvent : global::System.EventArgs {
            
            private delstatusreportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportRowChangeEvent(delstatusreportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public delstatusreportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591